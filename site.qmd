---
title: "Networks Comparison Tools"
format:
  html:
    page-layout: full
    code-block-bg: true
    code-block-border-left: "#696969"
---

This website features network comparison tools applicable to various types of networks. The comparison tools are functions implemented in R. Initially, you will find the source codes and explanations of how these tools are constructed. Subsequently, a detailed example on gene regulatory networks, which are systems of genes interacting to control gene expression levels, is provided. This example illustrates the application of the comparison tools and offers insights into their practical use.

# Source Code

In this section, you will find the source code for network comparison tools implemented in R that are mainly topological metrics. A step-by-step explanation of each function is available, detailing their construction and functionality. By understanding the underlying code, users can gain a complete overview of how these tools work, enabling them to apply them effectively to different types of networks. This detailed breakdown will also serve as the basis for the following example on gene regulation networks, demonstrating the practical application of these tools.

## Prerequisites

To implement the following [metrics](#metrics), certain R functions are required to format the databases you intend to use.

::: {.callout-important title="Data format"}
To apply all the following functions to your dataset, it must contain two columns named `from` and `to`, representing pairs of nodes connected in the graph without any specific orientation.
:::

Firstly, the Sort_Columns() function is designed to standardize the representation of node pairs in a dataset by ensuring they are consistently ordered, irrespective of their original sequence. This function generates a new data frame where each row represents a pair of connected nodes in the network. For each pair, the function sorts the nodes alphabetically or numerically by comparing the values in the 'from' and 'to' columns. This guarantees a uniform representation of node pairs. Additionally, it eliminates duplicate rows to ensure that each pair is unique, and finally returns the sorted data frame.

::: {.callout-tip icon=false title="`Sort_Columns()`"}
```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll
#| highlight-style: github

# Sort_Columns() function sorts the pairs of nodes in a dataframe and removes duplicate pairs.
# Parameters:
#   - data: Input dataframe containing gene pairs with columns 'from' and 'to'.
# Returns:
#   - A dataframe with sorted and unique gene pairs.

Sort_Columns <- function(data) {
  
  # create a new dataframe with sorted gene pairs
  data_sorted <- data.frame(from = pmin(data$from, data$to), to = pmax(data$from, data$to))
  
  # remove duplicate rows
  data_sorted <- unique(data_sorted)
  
  # return the sorted dataframe
  return(data_sorted)
  
}
```
:::

Next, the `Dataframe_To_Graph()` function converts a dataframe of node pairs into a graph object. First, it sorts the pairs in the input dataframe to ensure consistent representation, then concatenates the `from` and `to` columns into a new dataframe named even, removing any duplicate rows. Finally, it creates a graph object from this dataframe of unique pairs using the `graph_from_data_frame()` function and returns the constructed graph object.

::: {.callout-tip icon=false title="`Dataframe_To_Graph()`"}
```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll

# Dataframe_To_Graph() function converts a dataframe of node pairs into a graph object.
# Parameters:
#   - data: Input dataframe containing node pairs with columns 'from' and 'to'.
# Returns:
#   - An igraph graph object representing the network of node pairs.

Dataframe_To_Graph <- function(data){

  # sort gene pairs in both datasets
  data <- Sort_Columns(data)
  
  # concatenate gene pairs into a new dataframe for each dataset
  pairs <- cbind(from = data$from, to = data$to, pairs = paste(data$from, data$to, sep = "_"))
  
  # remove duplicates in pairs
  unique_pairs <- unique(pairs)
  
  # load required libraries
  library(tidyr)
  library(igraph)
  
  # create graph object from dataframe
  graph <- graph_from_data_frame(unique_pairs, directed=FALSE)
  
  # return the dataframe with the results
  return(graph)

}
```
:::

Now that your database is in the correct format, you can apply the [metrics](#metrics) below.

## Graph Metrics {#metrics}

The following metrics have been developed to offer a comprehensive understanding of the similarities and differences between two graphs. These metrics facilitate a detailed analysis of both the structural and functional properties of the graphs.

### Nodes degree distributions

This measure examines the distribution of the number of connections (degrees) of nodes in the graph, providing insight into the connectivity patterns in the graph. The degree distribution of nodes is an essential measure for understanding connectivity in gene regulatory networks. This distribution indicates the number of connections that each node has with other nodes in the network. For example, an asymmetric distribution could indicate the presence of a few highly connected nodes (hubs), which are typical of biological networks. Analysis of this distribution allows you to assess the centrality and relative importance of genes within the network.

![**Figure 1. Schematic example of nodes degree distribution in two networks.** This figure shows two networks characterised by different node degree distributions. Specifically, one network contains two nodes with degree 2 and two nodes with degree 1, while the other network contains one node with degree 3 and three nodes with degree 1. Although the nodes in both examples are identical, the connections they form are very different. For example, node A may be relatively isolated in one network, but may play a central role in the other.](./images/NodesDistribution.png)

The `Degree_Distribution()` function computes the degree distribution of nodes in a network represented by an input dataframe. It starts by sorting and removing duplicates from pairs of nodes, then collects all the unique nodes present in these pairs. It then traverses these unique nodes to count the number of links associated with each through the columns of the dataframe. The results are then structured into a new dataframe that lists each node with its corresponding degree. Finally, the function ensures that any duplicate entries are removed to ensure that each node is only represented once in the final result.

::: {.callout-tip icon=false title="`Degree_Distribution()`"}
```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll
#| highlight-style: github

# Degree_Distribution() function calculates the degree distribution of nodes in a network.
# Parameters:
#   - data: Input dataframe containing node pairs.
# Returns:
#   - A dataframe with unique nodes and their corresponding degrees.

Degree_Distribution <- function(data) {
  
  # concatenate pairs into a new dataframe and remove duplicates in node pairs
  unique_pairs <- Sort_Columns(data)
  
  # initialize a vector to store counts
  all_nodes <- c(unique_pairs[,1], unique_pairs[,2])
  unique_nodes <- unique(all_nodes)
  counts <- numeric(length(unique_nodes))
  
  # loop through nodes
  for (i in seq_along(unique_nodes)) {
    node <- unique_nodes[i]
    # count the number of associated genes in both columns
    count <- sum(unique_pairs[,1]==node) + sum(unique_pairs[,2]==node)
    counts[i] <- count
  }
  
  # create a dataframe with the results
  result <- data.frame(node=unique_nodes, degree=counts)
  
  # remove duplicates
  result <- result[!duplicated(result$node), ]
  
  # return the results
  return(result)
  
}
```
:::

The `Degree_Distribution_Comparison()` function makes it easy to compare the degree distributions of nodes between two datasets representing different networks. It starts by loading the `ggplot2` graphing library. It then calculates the degree distributions for each dataset using the `Degree_Distribution()` function and combines these results into a df dataframe. This dataframe is structured to contain information about each unique node and its degree, as well as an indication of which dataset it belongs to (`data1` or `data2`). Using `ggplot2`, the function generates a bar chart showing the degree distributions of the two networks. Each bar is coloured according to the corresponding dataset, allowing an immediate visual comparison of the network structures in terms of the distribution of node connections. This graphical approach helps to quickly identify similarities and differences in the degree distributions between the two networks being analysed.

::: {.callout-tip icon=false title="`Degree_Distribution_Comparison()`"}
```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll
#| highlight-style: github

# Degree_Distribution_Comparison() function compares the degree distributions of nodes in two networks and visualizes them using a bar plot.
# Parameters:
#   - data1: Input dataframe containing node pairs for the first network.
#   - data2: Input dataframe containing node pairs for the second network.
# Returns:
#   - A ggplot object visualizing the comparison of degree distributions between the two networks.

Degree_Distribution_Comparison <- function(data1, data2){
  
  # load the necessary library for the plot
  library(ggplot2)
  
  # calculate degree counts for each database
  degree_distribution_1 <- Degree_Distribution(data1)
  degree_distribution_2 <- Degree_Distribution(data2)
  
  # create dataframe for creating comparison plot
  df <- rbind(data.frame(degree_distribution_1, dataset = deparse(substitute(data1))),
              data.frame(degree_distribution_2, dataset = deparse(substitute(data2))))
  
  # create histogram plot with ggplot
  ggplot(df, aes(x=degree, y=after_stat(count), fill=dataset)) +
    # display a histogram
    geom_histogram(position="dodge", alpha=0.5) +
    # customize legends
    labs(x="Degree", 
         y="Number of Nodes", 
         title="Comparison of Degree Distributions",
         fill=expression(underline("Dataset"))) +
    # specify legend display
    guides(color="none") +
    # customize text elements
    theme(strip.text.x=element_text(size=8),
          plot.title=element_text(size=12, hjust=0.5, face="bold"),
          legend.title=element_text(size=10))
  
}
```
:::



### Degree 1 global identity

Degree 1 global identity examines the proportion of nodes sharing identical connectivity to identify similarities between two networks. This metric calculates the percentage of shared edges between two graphs by comparing each pair of nodes to identify those that are shared, thereby assessing the similarity of the relationships between the nodes in the networks under study.

![**Figure 2. Schematic example of the percentage of identity between two networks.** Using this Figure as an example, note that this metric is simply the ratio of the number of similar edges to the total number of edges in the networks. In this schema, the percentage of identity would be 33.3%.](./images/NodesDistribution.png)

However, a problem arises when the two networks to be compared do not have the same number of edges. To overcome this problem, two different identity percentages need to be considered, each using one of the networks as a reference. The number of edges in network $r$ will be used to calculate the reference identity percentage $p_r$.

The `Global_Identity()` function calculates the overall percentage identity of node pairs between two data sets. It starts by checking if one of the datasets is empty. If it is, it returns a list of messages indicating the absence of nodes. It then sorts the pairs in each dataset using the `Sort_Columns()` function to ensure a consistent representation. The pairs are then concatenated into a single string and duplicates are removed. The function identifies the different pairs present in each data set using `setdiff()`. It then calculates the number of identical edges by subtracting the number of different pairs from the total number of pairs in the other dataset. Finally, it calculates the percentage of identical edges out of the total number of unique pairs in each data set and returns these percentages as a list.

::: {.callout-tip icon=false title="`Global_Identity()`"}
```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll
#| highlight-style: github

 # Global_Identity() function calculates the global identity percentage of node pairs between two datasets.
# Parameters:
#   - data1: Input dataframe containing gene pairs for the first dataset.
#   - data2: Input dataframe containing gene pairs for the second dataset.
# Returns:
#   - A list with the percentage of identical gene pairs in each dataset compared to the other.

Global_Identity <- function(data1, data2) {
  
  # check if data1 or data2 is empty
  if (nrow(data1) == 0) {
    return(list(
      identity_percentage_ReferenceData1 = "NO NODE",
      identity_percentage_ReferenceData2 = "/"
    ))
  }
  if (nrow(data2) == 0) {
    return(list(
      identity_percentage_ReferenceData1 = "/",
      identity_percentage_ReferenceData2 = "NO NODE"
    ))
  }
  
  # sort gene pairs in both datasets
  data1 <- Sort_Columns(data1)
  data2 <- Sort_Columns(data2)
  
  # concatenate gene pairs into a new dataframe for each dataset
  node_pairs_data1 <- cbind(from = data1$from, to = data1$to, pairs = paste(data1$from, data1$to, sep = "_"))
  node_pairs_data2 <- cbind(from = data2$from, to = data2$to, pairs = paste(data2$from, data2$to, sep = "_"))
  
  # remove duplicates in gene pairs
  unique_pairs_data1 <- unique(node_pairs_data1)
  unique_pairs_data2 <- unique(node_pairs_data2)
  
  # identify different gene pairs in each dataset
  different_pairs_data1 <- setdiff(unique_pairs_data2[, 3], unique_pairs_data1[, 3])
  different_pairs_data2 <- setdiff(unique_pairs_data1[, 3], unique_pairs_data2[, 3])
  
  # calculate the number of identical gene pairs in each dataset
  num_identical_pairs_data1 <- length(unique_pairs_data2[, 3]) - length(different_pairs_data1)
  num_identical_pairs_data2 <- length(unique_pairs_data1[, 3]) - length(different_pairs_data2)
  
  # calculate the percentage of identical gene pairs compared to the total number of unique pairs
  identity_percentage_ReferenceData1 <- (num_identical_pairs_data1 / length(unique_pairs_data1[, 3])) * 100
  identity_percentage_ReferenceData2 <- (num_identical_pairs_data2 / length(unique_pairs_data2[, 3])) * 100
  
  # construct the final report as a list
  report <- list(
    identity_percentage_ReferenceData1 = identity_percentage_ReferenceData1,
    identity_percentage_ReferenceData2 = identity_percentage_ReferenceData2
  )
  
  # return the results
  return(report)
  
}
```
:::


### Comparison of degree of nodes versus percentage identity on the neighborhood of these nodes at degree 1

This metric examines the relationship between the degree of nodes and the percentage of common neighbors in the graphs. It calculates the percentage of common neighbors for each node in the graph at degree 1 and analyzes how this percentage varies with the degree of the nodes. 

```{r}
#| output: true
#| code-fold: true
#| code-summary: "Click for more code details."
#| code-overflow: scroll
#| highlight-style: github

Degree_VS_IdentityPercentage <- function(data1, data2){
  
  # determine the maximum degree
  n <- max(Degree_Distribution(data1)$degree, Degree_Distribution(data2)$degree)
  
  # create a dataframe to store identity percentages
  identity_percentages <- data.frame(degree = 1:n,
                                     ReferenceData1 = numeric(n),
                                     ReferenceData2 = numeric(n))
  # initialize columns for data references
  identity_percentages$ReferenceData1 <- 1
  identity_percentages$ReferenceData2 <- 1
  
  # iterate over each degree
  for (i in 1:n){
    # extract genes lists for each dataset based on degree
    genes_list_data1 <- Degree_Distribution(data1)$gene[Degree_Distribution(data1)$degree == i]
    genes_list_data2 <- Degree_Distribution(data2)$gene[Degree_Distribution(data2)$degree == i]
    
    # initialize dataframes to store gene pairs
    all_gene_pairs_data1 <- data.frame(from = character(), to = character())
    all_gene_pairs_data2 <- data.frame(from = character(), to = character())
    
    # iterate over genes in each list
    for (gene in genes_list_data1) {
      # select rows where the gene is in the "from" or "to" column
      gene_pairs_data1 <- data1[data1$from == gene | data1$to == gene, c("from", "to")]
      # append gene pairs to all_gene_pairs_data1
      all_gene_pairs_data1 <- rbind(all_gene_pairs_data1, gene_pairs_data1)
    }
    for (gene in genes_list_data2) {
      gene_pairs_data2 <- data2[data2$from == gene | data2$to == gene, c("from", "to")]
      all_gene_pairs_data2 <- rbind(all_gene_pairs_data2, gene_pairs_data2)
    }
    
    # remove duplicate gene pairs
    all_gene_pairs_data1 <- unique(all_gene_pairs_data1)
    all_gene_pairs_data2 <- unique(all_gene_pairs_data2)
    
    # calculate identity percentages and store in the dataframe
    identity_percentages$ReferenceData1[i] <- Global_Identity(all_gene_pairs_data1, all_gene_pairs_data2)$identity_percentage_ReferenceData1
    identity_percentages$ReferenceData2[i] <- Global_Identity(all_gene_pairs_data1, all_gene_pairs_data2)$identity_percentage_ReferenceData2
  }
  
  # create a dataframe for the graph
  graph <- data.frame(degree = identity_percentages$degree,
                      percentages = c(identity_percentages$ReferenceData1,
                                      identity_percentages$ReferenceData2),
                      reference = c(rep(deparse(substitute(data1)), length(identity_percentages$ReferenceData1)),
                                    rep(deparse(substitute(data2)), length(identity_percentages$ReferenceData2))))
  
  # modify the values for red points and NA values to 0
  graph$percentages[graph$percentages %in% c("NO NODE", "/")] <- NA
  graph$color <- ifelse(is.na(graph$percentages), "Absent degree", as.character(graph$reference))
  graph$percentages[graph$percentages %in% NA] <- 0
  
  # create the plot
  library(ggplot2)
  plot <- ggplot(graph, aes(x = degree, y = as.numeric(percentages), fill = reference, color = color)) +
    # display a scatterplot
    geom_point() +
    # customize legends
    labs(x = "Degree", 
         y = "Identity Percentage", 
         title = "Degree vs Identity Distributions",
         color = expression(underline("Reference"))) +
    # specify legend display
    guides(fill = "none") +
    # customize text elements
    theme(strip.text.x = element_text(size = 8),
          plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
          legend.title = element_text(size = 10))
  
  # display the plot
  print(plot)
  
  # return the dataframe with the results
  return(identity_percentages)
  
}
```

## 

```{r}
#| code-overflow: scroll
Global_Identity_Degree <- function(data1, data2, degree) {
  
  # convert dataframes to graphs
  graph_data1 <- Dataframe_To_Graph(data1)
  graph_data2 <- Dataframe_To_Graph(data2)
  
  # initialize variables to store paths
  paths_data1 <- c()
  paths_data2 <- c()
  
  # find all simple paths in each graph up to a given degree
  l_data1 <- unlist(lapply(V(graph_data1) , function(x) all_simple_paths(graph_data1, from=x, cutoff=degree)), recursive = FALSE)
  l_data2 <- unlist(lapply(V(graph_data2) , function(x) all_simple_paths(graph_data2, from=x, cutoff=degree)), recursive = FALSE)
  
  # filter paths to only include those with the specified degree
  l_data1 <- l_data1[lengths(l_data1) == degree + 1]
  l_data2 <- l_data2[lengths(l_data2) == degree + 1]
  
  # convert paths to character IDs
  paths_data1 <- lapply(1:length(l_data1), function(x) as_ids(l_data1[[x]]))
  paths_data2 <- lapply(1:length(l_data2), function(x) as_ids(l_data2[[x]]))
  
  # combine paths into dataframes
  paths_data1 <- do.call(rbind, paths_data1)
  paths_data2 <- do.call(rbind, paths_data2)
  
  # combine paths and create a new column by uniting the paths
  paths_data1 <- data.frame(c(paths_data1, unite(paths_data1, paths, sep="_")))
  paths_data2 <- data.frame(c(paths_data2, unite(paths_data2, paths, sep="_")))
  
  # identify different gene pairs in each dataset
  different_pairs_data1 <- setdiff(paths_data2[,degree+2], paths_data1[,degree+2])
  different_pairs_data2 <- setdiff(paths_data1[,degree+2], paths_data2[,degree+2])
  
  # calculate the number of identical gene pairs in each dataset
  num_identical_pairs_data1 <- length(paths_data2[,degree+1]) - length(different_pairs_data1)
  num_identical_pairs_data2 <- length(paths_data1[,degree+1]) - length(different_pairs_data2)
  
  # calculate the percentage of identical gene pairs compared to the total number of unique pairs
  identity_percentage_ReferenceData1 <- (num_identical_pairs_data1 / length(paths_data1[,degree+1])) * 100
  identity_percentage_ReferenceData2 <- (num_identical_pairs_data2 / length(paths_data2[,degree+1])) * 100
  
  # construct the final report as a list
  report <- list(
    identity_percentage_ReferenceData1 = identity_percentage_ReferenceData1,
    identity_percentage_ReferenceData2 = identity_percentage_ReferenceData2
  )
  
  # return the results
  return(report)

}
````

```{r}
#| code-overflow: scroll
Degree_Identity_Comparison <- function(data1, data2, n) {
  
  # convert dataframes to graphs
  graph_data1 <- Dataframe_To_Graph(data1)
  graph_data2 <- Dataframe_To_Graph(data2)
  
  # find all simple paths in each graph up to the specified degree
  l_data1 <- unlist(lapply(V(graph_data1) , function(x) all_simple_paths(graph_data1, from=x, cutoff=n)), recursive = FALSE)
  l_data2 <- unlist(lapply(V(graph_data2) , function(x) all_simple_paths(graph_data2, from=x, cutoff=n)), recursive = FALSE)
  
  # calculate the length of each path
  lengths_paths_data1 <- sapply(l_data1, length)
  lengths_paths_data2 <- sapply(l_data2, length)
  
  # find the maximum path length
  longueur_max_data1 <- max(lengths_paths_data1)
  longueur_max_data2 <- max(lengths_paths_data2)
  
  # determine the maximum degree to consider
  n <- min(longueur_max_data1, longueur_max_data2) - 1
  
  # initialize dataframe to store identity percentages
  graph <- data.frame(identity_percentage_ReferenceData1 = numeric(n),
                      identity_percentage_ReferenceData2 = numeric(n))
  
  # loop over degrees and calculate identity percentages
  for (i in 1:n){
    # calculate identity percentages only if they are not equal to 0
    if (Global_Identity_Degree(data1,data2,i)$identity_percentage_ReferenceData1 != 0 ||
        Global_Identity_Degree(data1,data2,i)$identity_percentage_ReferenceData2 != 0) {
      graph$identity_percentage_ReferenceData1[i] <- Global_Identity_Degree(data1,data2,i)$identity_percentage_ReferenceData1
      graph$identity_percentage_ReferenceData2[i] <- Global_Identity_Degree(data1,data2,i)$identity_percentage_ReferenceData2
    }
  }
  
  # create a dataframe for the graph
  df <- data.frame(length = seq(1,n),
                   percentages = c(graph$identity_percentage_ReferenceData1,
                                   graph$identity_percentage_ReferenceData2),
                   reference = c(rep(deparse(substitute(data1)), length(graph$identity_percentage_ReferenceData1)),
                                 rep(deparse(substitute(data2)), length(graph$identity_percentage_ReferenceData2))))
  
  # create the plot
  library(ggplot2)
  plot <- ggplot(df, aes(x = length, y = as.numeric(percentages), color = reference)) +
    # display a scatterplot
    geom_point() +
    # customize legends
    labs(x = "Length of Paths", 
         y = "Identity Percentage", 
         title = "Length of Paths vs Identity Percentages",
         color = expression(underline("Reference"))) +
    # customize scales
    scale_x_continuous(breaks=c(seq(1, n, by = 1))) +
    # customize text elements
    theme(strip.text.x = element_text(size = 8),
          plot.title = element_text(size = 12, hjust = 0.5, face = "bold"),
          legend.title = element_text(size = 10))
  
  # print the plot
  print(plot)
  
  # return the dataframe with the results
  return(graph)

}
```
:::



### Percentage of overall identity of the graph at degree 2, 3, or even n

This metric extends the analysis to higher degrees (beyond degree 1) by calculating the percentage of common paths of length 2, 3, or n between the graphs. It compares paths of increasing length and calculates the percentage of common paths compared to the total number of paths by taking the graph from each method as a reference.



### Analysis of the directness/time delay indices of the edges predicted by TDCor and common with those predicted by DIANE

This metric involves analyzing the directness or time delay indices of edges predicted by TDCor and comparing them with edges predicted by DIANE. It examines how consistent the predictions are between the two methods.



### Analysis of common clusters

This metric involves identifying and analyzing clusters of nodes that are common between the graphs. It examines how nodes are grouped together into clusters and identifies clusters that are present in both graphs, providing insights into common structural patterns.



# Example